(()=>{var e,n,t={887:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>m});var r=t(354),o=t.n(r),i=t(314),a=t.n(i),c=t(417),s=t.n(c),d=new URL(t(787),t.b),l=new URL(t(632),t.b),u=new URL(t(682),t.b),f=a()(o()),A=s()(d),p=s()(l),h=s()(u);f.push([e.id,`*{padding:0;margin:0;border:none}*,*::before,*::after{-webkit-box-sizing:border-box;box-sizing:border-box}a,a:link,a:visited{-webkit-text-decoration:none;text-decoration:none}a:hover{-webkit-text-decoration:none;text-decoration:none}aside,nav,footer,header,section,main{display:block}h1,h2,h3,h4,h5,h6,p{font-size:inherit;font-weight:inherit}ul,ul li{list-style:none}img{vertical-align:top}img,svg{max-width:100%;height:auto}address{font-style:normal}input,textarea,button,select{font-family:inherit;font-size:inherit;color:inherit;background-color:rgba(0,0,0,0)}input::-ms-clear{display:none}button,input[type=submit]{display:inline-block;-webkit-box-shadow:none;box-shadow:none;background-color:rgba(0,0,0,0);background:none;cursor:pointer}input:focus,input:active,button:focus,button:active{outline:none}button::-moz-focus-inner{padding:0;border:0}label{cursor:pointer}legend{display:block}input[type=file]{max-width:100%}@font-face{font-family:"Jost";src:url(${A}) format("woff2");font-weight:400;font-style:normal;font-display:swap}@font-face{font-family:"Jost";src:url(${p}) format("woff2");font-weight:700;font-style:normal;font-display:swap}@font-face{font-family:"Jost";src:url(${h}) format("woff2");font-weight:600;font-style:normal;font-display:swap}body{min-width:320px;min-height:100dvh;font-family:"Jost",sans-serif;font-weight:400;line-height:1.6;background-color:#fff;color:#141024}section{padding:120px 0}.container{margin:0 auto;padding:0 20px;max-width:1200px;width:100%;height:100%}.container--wide{max-width:1760px}.logo{font-weight:700;font-size:30px;color:#fff}.tel{font-weight:600;font-size:30px;color:#fff}.tel:hover{-webkit-text-decoration:underline;text-decoration:underline}.button{display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:25px 54px;font-size:18px;font-weight:400;line-height:1.6;text-align:center;-webkit-text-decoration:none;text-decoration:none;cursor:pointer;border:none;border-radius:5px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;background-color:#d52027;color:#fff;-webkit-transition:background-color .3s ease, color .3s ease;transition:background-color .3s ease, color .3s ease}.button:hover{background-color:#b9191d}.button--dark{background-color:#141024}.button--dark:hover{background-color:#282148}`,"",{version:3,sources:["webpack://./src/styles/reset.scss","webpack://./src/styles/fonts.scss","webpack://./src/styles/global.scss","webpack://./src/styles/variables.scss"],names:[],mappings:"AACA,EACE,SAAA,CACA,QAAA,CACA,WAAA,CAGF,qBAGE,6BAAA,CAAA,qBAAA,CAKF,mBAGE,4BAAA,CAAA,oBAAA,CAGF,QACE,4BAAA,CAAA,oBAAA,CAKF,qCAME,aAAA,CAGF,oBAOE,iBAAA,CACA,mBAAA,CAGF,SAEE,eAAA,CAGF,IACE,kBAAA,CAGF,QAEE,cAAA,CACA,WAAA,CAGF,QACE,iBAAA,CAKF,6BAIE,mBAAA,CACA,iBAAA,CACA,aAAA,CACA,8BAAA,CAGF,iBACE,YAAA,CAGF,0BAEE,oBAAA,CACA,uBAAA,CAAA,eAAA,CACA,8BAAA,CACA,eAAA,CACA,cAAA,CAGF,oDAIE,YAAA,CAGF,yBACE,SAAA,CACA,QAAA,CAGF,MACE,cAAA,CAGF,OACE,aAAA,CAGF,iBACE,cAAA,CC/GA,WACE,kBAQe,CAPf,2DAAA,CACA,eAM4D,CAL5D,iBALoD,CAMpD,iBAAA,CALF,WACE,kBASe,CARf,2DAAA,CACA,eAOyD,CANzD,iBALoD,CAMpD,iBAAA,CALF,WACE,kBAUe,CATf,2DAAA,CACA,eAQ6D,CAP7D,iBALoD,CAMpD,iBAAA,CCJJ,KACE,eAAA,CACA,iBAAA,CACA,6BCLU,CDMV,eAAA,CACA,eAAA,CACA,qBCJgB,CDKhB,aCNc,CDShB,QACE,eAAA,CAGF,WACE,aAAA,CACA,cAAA,CACA,gBAAA,CACA,UAAA,CACA,WAAA,CAEA,iBACE,gBAAA,CAIJ,MACE,eAAA,CACA,cAAA,CACA,UC3BgB,CD8BlB,KACE,eAAA,CACA,cAAA,CACA,UCjCgB,CDmChB,WACE,iCAAA,CAAA,yBAAA,CAIJ,QACE,0BAAA,CAAA,0BAAA,CAAA,mBAAA,CACA,uBAAA,CAAA,oBAAA,CAAA,sBAAA,CACA,wBAAA,CAAA,qBAAA,CAAA,kBAAA,CACA,iBAAA,CACA,cAAA,CACA,eAAA,CACA,eAAA,CACA,iBAAA,CACA,4BAAA,CAAA,oBAAA,CACA,cAAA,CACA,WAAA,CACA,iBAAA,CACA,wBAAA,CAAA,qBAAA,CAAA,oBAAA,CAAA,gBAAA,CACA,wBCrDa,CDsDb,UCvDgB,CDwDhB,4DACE,CADF,oDACE,CAGF,cACE,wBChDwB,CDmD1B,cACE,wBClEY,CDoEZ,oBACE,wBCrDwB",sourcesContent:["/* Reset and base styles  */\n* {\n  padding: 0;\n  margin: 0;\n  border: none;\n}\n\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n}\n\n/* Links */\n\na,\na:link,\na:visited {\n  text-decoration: none;\n}\n\na:hover {\n  text-decoration: none;\n}\n\n/* Common */\n\naside,\nnav,\nfooter,\nheader,\nsection,\nmain {\n  display: block;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\np {\n  font-size: inherit;\n  font-weight: inherit;\n}\n\nul,\nul li {\n  list-style: none;\n}\n\nimg {\n  vertical-align: top;\n}\n\nimg,\nsvg {\n  max-width: 100%;\n  height: auto;\n}\n\naddress {\n  font-style: normal;\n}\n\n/* Form */\n\ninput,\ntextarea,\nbutton,\nselect {\n  font-family: inherit;\n  font-size: inherit;\n  color: inherit;\n  background-color: transparent;\n}\n\ninput::-ms-clear {\n  display: none;\n}\n\nbutton,\ninput[type='submit'] {\n  display: inline-block;\n  box-shadow: none;\n  background-color: transparent;\n  background: none;\n  cursor: pointer;\n}\n\ninput:focus,\ninput:active,\nbutton:focus,\nbutton:active {\n  outline: none;\n}\n\nbutton::-moz-focus-inner {\n  padding: 0;\n  border: 0;\n}\n\nlabel {\n  cursor: pointer;\n}\n\nlegend {\n  display: block;\n}\n\ninput[type='file'] {\n  max-width: 100%;\n}\n","@mixin font-face($name, $path, $weight: normal, $style: normal) {\n  @font-face {\n    font-family: $name;\n    src: url('#{$path}.woff2') format('woff2');\n    font-weight: $weight;\n    font-style: $style;\n    font-display: swap;\n  }\n}\n\n@include font-face('Jost', '../assets/fonts/Jost/Jost-Regular', 400);\n@include font-face('Jost', '../assets/fonts/Jost/Jost-Bold', 700);\n@include font-face('Jost', '../assets/fonts/Jost/Jost-SemiBold', 600);\n","@use 'variables' as *;\n\nbody {\n  min-width: 320px;\n  min-height: 100dvh;\n  font-family: $font-main;\n  font-weight: 400;\n  line-height: 1.6;\n  background-color: $bg-color-primary;\n  color: $text-color-primary;\n}\n\nsection {\n  padding: 120px 0;\n}\n\n.container {\n  margin: 0 auto;\n  padding: 0 20px;\n  max-width: 1200px;\n  width: 100%;\n  height: 100%;\n\n  &--wide {\n    max-width: 1760px;\n  }\n}\n\n.logo {\n  font-weight: 700;\n  font-size: 30px;\n  color: $text-color-secondary;\n}\n\n.tel {\n  font-weight: 600;\n  font-size: 30px;\n  color: $text-color-secondary;\n\n  &:hover {\n    text-decoration: underline;\n  }\n}\n\n.button {\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  padding: 25px 54px;\n  font-size: 18px;\n  font-weight: 400;\n  line-height: 1.6;\n  text-align: center;\n  text-decoration: none;\n  cursor: pointer;\n  border: none;\n  border-radius: 5px;\n  user-select: none;\n  background-color: $controls-bg-primary;\n  color: $controls-color-primary;\n  transition:\n    background-color 0.3s ease,\n    color 0.3s ease;\n\n  &:hover {\n    background-color: $controls-bg-primary-hover;\n  }\n\n  &--dark {\n    background-color: $controls-bg-secondary;\n\n    &:hover {\n      background-color: $controls-bg-secondary-hover;\n    }\n  }\n}\n","$font-main: 'Jost', sans-serif;\n\n// Цвета\n$primary-color: #141024;\n$secondary-color: #ffffff;\n$accent-color: #d52027;\n\n// Цвета текста\n$text-color-primary: $primary-color;\n$text-color-secondary: $secondary-color;\n\n// Фоны\n$bg-color-primary: $secondary-color;\n$bg-color-accent: $accent-color;\n\n// Кнопки и элементы управления\n$controls-bg-primary: $accent-color;\n$controls-bg-primary-hover: #b9191d;\n$controls-bg-secondary: $primary-color;\n$controls-bg-secondary-hover: #282148;\n$controls-color-primary: $secondary-color;\n"],sourceRoot:""}]);const m=f},314:e=>{"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(a[s]=!0)}for(var d=0;d<e.length;d++){var l=[].concat(e[d]);r&&a[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),n.push(l))}},n}},417:e=>{"use strict";e.exports=function(e,n){return n||(n={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),n.hash&&(e+=n.hash),/["'() \t\n]|(%20)/.test(e)||n.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},354:e=>{"use strict";e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[n].concat([i]).join("\n")}return[n].join("\n")}},268:(e,n,t)=>{"use strict";var r=t(72),o=t.n(r),i=t(825),a=t.n(i),c=t(659),s=t.n(c),d=t(56),l=t.n(d),u=t(540),f=t.n(u),A=t(113),p=t.n(A),h=t(887),m={};m.styleTagTransform=p(),m.setAttributes=l(),m.insert=s().bind(null,"head"),m.domAPI=a(),m.insertStyleElement=f();var C=o()(h.default,m);if(!h.default.locals||e.hot.invalidate){var g=!h.default.locals,v=g?h:h.default.locals;e.hot.accept(887,(n=>{h=t(887),function(e,n,t){if(!e&&n||e&&!n)return!1;var r;for(r in e)if((!t||"default"!==r)&&e[r]!==n[r])return!1;for(r in n)if(!(t&&"default"===r||e[r]))return!1;return!0}(v,g?h:h.default.locals,g)?(v=g?h:h.default.locals,C(h.default)):e.hot.invalidate()}))}e.hot.dispose((function(){C()})),h.default&&h.default.locals&&h.default.locals},72:e=>{"use strict";var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var i={},a=[],c=0;c<e.length;c++){var s=e[c],d=r.base?s[0]+r.base:s[0],l=i[d]||0,u="".concat(d," ").concat(l);i[d]=l+1;var f=t(u),A={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==f)n[f].references++,n[f].updater(A);else{var p=o(A,r);r.byIndex=c,n.splice(c,0,{identifier:u,updater:p,references:1})}a.push(u)}return a}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var c=t(i[a]);n[c].references--}for(var s=r(e,o),d=0;d<i.length;d++){var l=t(i[d]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}i=s}}},659:e=>{"use strict";var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},540:e=>{"use strict";e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},56:(e,n,t)=>{"use strict";e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},825:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},113:e=>{"use strict";e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},789:(e,n,t)=>{"use strict";t(268),t(144)},144:()=>{const e=document.querySelector(".heading");console.log(e.innerHTML)},632:(e,n,t)=>{"use strict";e.exports=t.p+"assets/fonts/Jost-Bold.woff2"},787:(e,n,t)=>{"use strict";e.exports=t.p+"assets/fonts/Jost-Regular.woff2"},682:(e,n,t)=>{"use strict";e.exports=t.p+"assets/fonts/Jost-SemiBold.woff2"}},r={};function o(e){var n=r[e];if(void 0!==n){if(void 0!==n.error)throw n.error;return n.exports}var i=r[e]={id:e,exports:{}};try{var a={id:e,module:i,factory:t[e],require:o};o.i.forEach((function(e){e(a)})),i=a.module,a.factory.call(i.exports,i,i.exports,a.require)}catch(e){throw i.error=e,e}return i.exports}o.m=t,o.c=r,o.i=[],o.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return o.d(n,{a:n}),n},o.d=(e,n)=>{for(var t in n)o.o(n,t)&&!o.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},o.hu=e=>e+"."+o.h()+".hot-update.js",o.miniCssF=e=>{},o.hmrF=()=>"main."+o.h()+".hot-update.json",o.h=()=>"e131a2d8f693284ba56a",o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),e={},n="block-2-html-css:",o.l=(t,r,i,a)=>{if(e[t])e[t].push(r);else{var c,s;if(void 0!==i)for(var d=document.getElementsByTagName("script"),l=0;l<d.length;l++){var u=d[l];if(u.getAttribute("src")==t||u.getAttribute("data-webpack")==n+i){c=u;break}}c||(s=!0,(c=document.createElement("script")).charset="utf-8",c.timeout=120,o.nc&&c.setAttribute("nonce",o.nc),c.setAttribute("data-webpack",n+i),c.src=t),e[t]=[r];var f=(n,r)=>{c.onerror=c.onload=null,clearTimeout(A);var o=e[t];if(delete e[t],c.parentNode&&c.parentNode.removeChild(c),o&&o.forEach((e=>e(r))),n)return n(r)},A=setTimeout(f.bind(null,void 0,{type:"timeout",target:c}),12e4);c.onerror=f.bind(null,c.onerror),c.onload=f.bind(null,c.onload),s&&document.head.appendChild(c)}},o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e,n,t,r={},i=o.c,a=[],c=[],s="idle",d=0,l=[];function u(e){s=e;for(var n=[],t=0;t<c.length;t++)n[t]=c[t].call(null,e);return Promise.all(n).then((function(){}))}function f(){0==--d&&u("ready").then((function(){if(0===d){var e=l;l=[];for(var n=0;n<e.length;n++)e[n]()}}))}function A(e){if("idle"!==s)throw new Error("check() is only allowed in idle status");return u("check").then(o.hmrM).then((function(t){return t?u("prepare").then((function(){var r=[];return n=[],Promise.all(Object.keys(o.hmrC).reduce((function(e,i){return o.hmrC[i](t.c,t.r,t.m,e,n,r),e}),[])).then((function(){return n=function(){return e?h(e):u("ready").then((function(){return r}))},0===d?n():new Promise((function(e){l.push((function(){e(n())}))}));var n}))})):u(m()?"ready":"idle").then((function(){return null}))}))}function p(e){return"ready"!==s?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status (state: "+s+")")})):h(e)}function h(e){e=e||{},m();var r=n.map((function(n){return n(e)}));n=void 0;var o=r.map((function(e){return e.error})).filter(Boolean);if(o.length>0)return u("abort").then((function(){throw o[0]}));var i=u("dispose");r.forEach((function(e){e.dispose&&e.dispose()}));var a,c=u("apply"),s=function(e){a||(a=e)},d=[];return r.forEach((function(e){if(e.apply){var n=e.apply(s);if(n)for(var t=0;t<n.length;t++)d.push(n[t])}})),Promise.all([i,c]).then((function(){return a?u("fail").then((function(){throw a})):t?h(e).then((function(e){return d.forEach((function(n){e.indexOf(n)<0&&e.push(n)})),e})):u("idle").then((function(){return d}))}))}function m(){if(t)return n||(n=[]),Object.keys(o.hmrI).forEach((function(e){t.forEach((function(t){o.hmrI[e](t,n)}))})),t=void 0,!0}o.hmrD=r,o.i.push((function(l){var h,m,C,g,v=l.module,b=function(n,t){var r=i[t];if(!r)return n;var o=function(o){if(r.hot.active){if(i[o]){var c=i[o].parents;-1===c.indexOf(t)&&c.push(t)}else a=[t],e=o;-1===r.children.indexOf(o)&&r.children.push(o)}else console.warn("[HMR] unexpected require("+o+") from disposed module "+t),a=[];return n(o)},c=function(e){return{configurable:!0,enumerable:!0,get:function(){return n[e]},set:function(t){n[e]=t}}};for(var l in n)Object.prototype.hasOwnProperty.call(n,l)&&"e"!==l&&Object.defineProperty(o,l,c(l));return o.e=function(e,t){return function(e){switch(s){case"ready":u("prepare");case"prepare":return d++,e.then(f,f),e;default:return e}}(n.e(e,t))},o}(l.require,l.id);v.hot=(h=l.id,m=v,g={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:C=e!==h,_requireSelf:function(){a=m.parents.slice(),e=C?void 0:h,o(h)},active:!0,accept:function(e,n,t){if(void 0===e)g._selfAccepted=!0;else if("function"==typeof e)g._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var r=0;r<e.length;r++)g._acceptedDependencies[e[r]]=n||function(){},g._acceptedErrorHandlers[e[r]]=t;else g._acceptedDependencies[e]=n||function(){},g._acceptedErrorHandlers[e]=t},decline:function(e){if(void 0===e)g._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var n=0;n<e.length;n++)g._declinedDependencies[e[n]]=!0;else g._declinedDependencies[e]=!0},dispose:function(e){g._disposeHandlers.push(e)},addDisposeHandler:function(e){g._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=g._disposeHandlers.indexOf(e);n>=0&&g._disposeHandlers.splice(n,1)},invalidate:function(){switch(this._selfInvalidated=!0,s){case"idle":n=[],Object.keys(o.hmrI).forEach((function(e){o.hmrI[e](h,n)})),u("ready");break;case"ready":Object.keys(o.hmrI).forEach((function(e){o.hmrI[e](h,n)}));break;case"prepare":case"check":case"dispose":case"apply":(t=t||[]).push(h)}},check:A,apply:p,status:function(e){if(!e)return s;c.push(e)},addStatusHandler:function(e){c.push(e)},removeStatusHandler:function(e){var n=c.indexOf(e);n>=0&&c.splice(n,1)},data:r[h]},e=void 0,g),v.parents=a,v.children=[],a=[],l.require=b})),o.hmrC={},o.hmrI={}})(),(()=>{var e;o.g.importScripts&&(e=o.g.location+"");var n=o.g.document;if(!e&&n&&(n.currentScript&&"SCRIPT"===n.currentScript.tagName.toUpperCase()&&(e=n.currentScript.src),!e)){var t=n.getElementsByTagName("script");if(t.length)for(var r=t.length-1;r>-1&&(!e||!/^http(s?):/.test(e));)e=t[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),o.p=e})(),(()=>{if("undefined"!=typeof document){var e=[],n=[],t=t=>({dispose:()=>{for(var n=0;n<e.length;n++){var t=e[n];t.parentNode&&t.parentNode.removeChild(t)}e.length=0},apply:()=>{for(var e=0;e<n.length;e++)n[e].rel="stylesheet";n.length=0}});o.hmrC.miniCss=(r,i,a,c,s,d)=>{s.push(t),r.forEach((t=>{var r=o.miniCssF(t),i=o.p+r,a=((e,n)=>{for(var t=document.getElementsByTagName("link"),r=0;r<t.length;r++){var o=(a=t[r]).getAttribute("data-href")||a.getAttribute("href");if("stylesheet"===a.rel&&(o===e||o===n))return a}var i=document.getElementsByTagName("style");for(r=0;r<i.length;r++){var a;if((o=(a=i[r]).getAttribute("data-href"))===e||o===n)return a}})(r,i);a&&c.push(new Promise(((r,c)=>{var s=((e,n,t,r,i)=>{var a=document.createElement("link");return a.rel="stylesheet",a.type="text/css",o.nc&&(a.nonce=o.nc),a.onerror=a.onload=t=>{if(a.onerror=a.onload=null,"load"===t.type)r();else{var o=t&&t.type,c=t&&t.target&&t.target.href||n,s=new Error("Loading CSS chunk "+e+" failed.\n("+o+": "+c+")");s.name="ChunkLoadError",s.code="CSS_CHUNK_LOAD_FAILED",s.type=o,s.request=c,a.parentNode&&a.parentNode.removeChild(a),i(s)}},a.href=n,t?t.parentNode.insertBefore(a,t.nextSibling):document.head.appendChild(a),a})(t,i,a,(()=>{s.as="style",s.rel="preload",r()}),c);e.push(a),n.push(s)})))}))}}})(),(()=>{o.b=document.baseURI||self.location.href;var e,n,t,r,i,a=o.hmrS_jsonp=o.hmrS_jsonp||{792:0},c={};function s(n,t){return e=t,new Promise(((e,t)=>{c[n]=e;var r=o.p+o.hu(n),i=new Error;o.l(r,(e=>{if(c[n]){c[n]=void 0;var r=e&&("load"===e.type?"missing":e.type),o=e&&e.target&&e.target.src;i.message="Loading hot update chunk "+n+" failed.\n("+r+": "+o+")",i.name="ChunkLoadError",i.type=r,i.request=o,t(i)}}))}))}function d(e){function c(e){for(var n=[e],t={},r=n.map((function(e){return{chain:[e],id:e}}));r.length>0;){var i=r.pop(),a=i.id,c=i.chain,d=o.c[a];if(d&&(!d.hot._selfAccepted||d.hot._selfInvalidated)){if(d.hot._selfDeclined)return{type:"self-declined",chain:c,moduleId:a};if(d.hot._main)return{type:"unaccepted",chain:c,moduleId:a};for(var l=0;l<d.parents.length;l++){var u=d.parents[l],f=o.c[u];if(f){if(f.hot._declinedDependencies[a])return{type:"declined",chain:c.concat([u]),moduleId:a,parentId:u};-1===n.indexOf(u)&&(f.hot._acceptedDependencies[a]?(t[u]||(t[u]=[]),s(t[u],[a])):(delete t[u],n.push(u),r.push({chain:c.concat([u]),id:u})))}}}}return{type:"accepted",moduleId:e,outdatedModules:n,outdatedDependencies:t}}function s(e,n){for(var t=0;t<n.length;t++){var r=n[t];-1===e.indexOf(r)&&e.push(r)}}o.f&&delete o.f.jsonpHmr,n=void 0;var d={},l=[],u={},f=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var A in t)if(o.o(t,A)){var p=t[A],h=p?c(A):{type:"disposed",moduleId:A},m=!1,C=!1,g=!1,v="";switch(h.chain&&(v="\nUpdate propagation: "+h.chain.join(" -> ")),h.type){case"self-declined":e.onDeclined&&e.onDeclined(h),e.ignoreDeclined||(m=new Error("Aborted because of self decline: "+h.moduleId+v));break;case"declined":e.onDeclined&&e.onDeclined(h),e.ignoreDeclined||(m=new Error("Aborted because of declined dependency: "+h.moduleId+" in "+h.parentId+v));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(h),e.ignoreUnaccepted||(m=new Error("Aborted because "+A+" is not accepted"+v));break;case"accepted":e.onAccepted&&e.onAccepted(h),C=!0;break;case"disposed":e.onDisposed&&e.onDisposed(h),g=!0;break;default:throw new Error("Unexception type "+h.type)}if(m)return{error:m};if(C)for(A in u[A]=p,s(l,h.outdatedModules),h.outdatedDependencies)o.o(h.outdatedDependencies,A)&&(d[A]||(d[A]=[]),s(d[A],h.outdatedDependencies[A]));g&&(s(l,[h.moduleId]),u[A]=f)}t=void 0;for(var b,y=[],w=0;w<l.length;w++){var x=l[w],E=o.c[x];E&&(E.hot._selfAccepted||E.hot._main)&&u[x]!==f&&!E.hot._selfInvalidated&&y.push({module:x,require:E.hot._requireSelf,errorHandler:E.hot._selfAccepted})}return{dispose:function(){var e;r.forEach((function(e){delete a[e]})),r=void 0;for(var n,t=l.slice();t.length>0;){var i=t.pop(),c=o.c[i];if(c){var s={},u=c.hot._disposeHandlers;for(w=0;w<u.length;w++)u[w].call(null,s);for(o.hmrD[i]=s,c.hot.active=!1,delete o.c[i],delete d[i],w=0;w<c.children.length;w++){var f=o.c[c.children[w]];f&&(e=f.parents.indexOf(i))>=0&&f.parents.splice(e,1)}}}for(var A in d)if(o.o(d,A)&&(c=o.c[A]))for(b=d[A],w=0;w<b.length;w++)n=b[w],(e=c.children.indexOf(n))>=0&&c.children.splice(e,1)},apply:function(n){for(var t in u)o.o(u,t)&&(o.m[t]=u[t]);for(var r=0;r<i.length;r++)i[r](o);for(var a in d)if(o.o(d,a)){var c=o.c[a];if(c){b=d[a];for(var s=[],f=[],A=[],p=0;p<b.length;p++){var h=b[p],m=c.hot._acceptedDependencies[h],C=c.hot._acceptedErrorHandlers[h];if(m){if(-1!==s.indexOf(m))continue;s.push(m),f.push(C),A.push(h)}}for(var g=0;g<s.length;g++)try{s[g].call(null,b)}catch(t){if("function"==typeof f[g])try{f[g](t,{moduleId:a,dependencyId:A[g]})}catch(r){e.onErrored&&e.onErrored({type:"accept-error-handler-errored",moduleId:a,dependencyId:A[g],error:r,originalError:t}),e.ignoreErrored||(n(r),n(t))}else e.onErrored&&e.onErrored({type:"accept-errored",moduleId:a,dependencyId:A[g],error:t}),e.ignoreErrored||n(t)}}}for(var v=0;v<y.length;v++){var w=y[v],x=w.module;try{w.require(x)}catch(t){if("function"==typeof w.errorHandler)try{w.errorHandler(t,{moduleId:x,module:o.c[x]})}catch(r){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:x,error:r,originalError:t}),e.ignoreErrored||(n(r),n(t))}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:x,error:t}),e.ignoreErrored||n(t)}}return l}}}self.webpackHotUpdateblock_2_html_css=(n,r,a)=>{for(var s in r)o.o(r,s)&&(t[s]=r[s],e&&e.push(s));a&&i.push(a),c[n]&&(c[n](),c[n]=void 0)},o.hmrI.jsonp=function(e,n){t||(t={},i=[],r=[],n.push(d)),o.o(t,e)||(t[e]=o.m[e])},o.hmrC.jsonp=function(e,c,l,u,f,A){f.push(d),n={},r=c,t=l.reduce((function(e,n){return e[n]=!1,e}),{}),i=[],e.forEach((function(e){o.o(a,e)&&void 0!==a[e]?(u.push(s(e,A)),n[e]=!0):n[e]=!1})),o.f&&(o.f.jsonpHmr=function(e,t){n&&o.o(n,e)&&!n[e]&&(t.push(s(e)),n[e]=!0)})},o.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(o.p+o.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),o.nc=void 0,o(789)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,